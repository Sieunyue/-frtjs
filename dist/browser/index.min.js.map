{"version":3,"file":"index.min.js","sources":["../../packages/comm/src/config.ts","../../packages/comm/src/constant.ts","../../packages/comm/src/utils.ts","../../packages/core/src/client.ts","../../node_modules/.pnpm/mitt@3.0.1/node_modules/mitt/dist/mitt.mjs","../../packages/core/src/transport.ts","../../packages/browser/src/transport.ts","../../packages/browser/src/client.ts","../../packages/browser/src/plugins/error.ts","../../packages/browser/src/plugins/resource.ts","../../packages/browser/src/plugins/xhr.ts","../../packages/browser/src/plugins/promise.ts","../../packages/browser/index.ts"],"sourcesContent":["import { version } from '../package.json'\n\nexport const SDK_NAME = 'frtjs'\nexport const SDK_VERSION = version\n","\n\nexport const enum TransportCategory {\n  PV = 'pv',\n  PERF ='perf',\n  API ='api',\n  ERROR ='error',\n  CUSTOM = 'custom'\n}\nexport const enum BrowserEventTypes  {\n  XHR = 'xhr',\n  FETCH = 'fetch',\n  JS = 'js',\n  DOM = 'dom',\n  RESOURCE = 'resource',\n  UNHANDLEDREJECTION = 'unhandledrejection',\n  ROUTER = 'router'\n}\n\nexport type EventTypes = BrowserEventTypes\n\n","//解析错误堆栈\nconst FULL_MATCH =\n  /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i\n\n\nexport function parseStackLine(line: string) {\n  const lineMatch = line.match(FULL_MATCH)\n  if (!lineMatch) return {}\n  const filename = lineMatch[2]\n  const functionName = lineMatch[1] || ''\n  const lineno = parseInt(lineMatch[3], 10) || undefined\n  const colno = parseInt(lineMatch[4], 10) || undefined\n  return {\n    filename,\n    functionName,\n    lineno,\n    colno\n  }\n}\n\n// 解析错误堆栈\nexport function parseStackFrames(error: Error, maxDepth = 10) {\n  const { stack } = error\n  // 无 stack 时直接返回\n  if (!stack) return []\n  const frames = []\n  for (const line of stack.split('\\n').slice(1)) {\n    const frame = parseStackLine(line)\n    if (frame) {\n      frames.push(frame)\n    }\n  }\n  return frames.slice(0, maxDepth)\n}\n\n\nexport const isJsError = (e: ErrorEvent | Event) => {\n  return  e instanceof ErrorEvent\n}\n\nexport const isResourceError = (e: ErrorEvent | Event) => {\n  return !isJsError(e)\n}\n\n\nexport const toHashCode = (s: string) => s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n\nexport const getTimestampValue = () => new Date().valueOf()\n","import { EventTypes, SDK_NAME, SDK_VERSION, TransportCategory } from '@frtjs/comm'\nimport { BaseBreadcrumbType, BaseClientType, BaseOptionsType, BasePluginType } from '@frtjs/types'\nimport mitt, { Emitter } from 'mitt'\nimport { BaseTransport } from './transport'\n\nexport abstract class BaseClient<O extends BaseOptionsType = BaseOptionsType> implements BaseClientType<O> {\n  SDK_NAME = SDK_NAME\n  SDK_VERSION = SDK_VERSION\n  private _subscribe: Emitter<Record<EventTypes, any>>\n  options: O\n  breadcrumbs: BaseBreadcrumbType[]\n  abstract transport: BaseTransport\n  \n  constructor(options = {}) {\n    this.options = Object.assign({ maxBreadcrumbs: 20 }, options) as O\n    this._subscribe = mitt()\n    this.breadcrumbs = []\n  }\n  \n  use(plugin: BasePluginType) {\n    plugin.trace.call(this, this._subscribe.emit.bind(this, plugin.name))\n    \n    // this._plugins.push(plugin)\n    const wrapperTransform = (...args: any[]) => {\n      // 先执行transform\n      const res = plugin.transform?.apply(this, args)\n      // 拿到transform返回的数据并传入\n      plugin.post?.call(this, res)\n    }\n    \n    this._subscribe.on(plugin.name, wrapperTransform)\n    return this\n  }\n  \n  async pushBreadCrumbs(data: BaseBreadcrumbType) {\n    this.breadcrumbs.push(data)\n    \n    if (this.breadcrumbs.length >= this.options.maxBreadcrumbs!) {\n      this.transport.send(TransportCategory.API, [...this.breadcrumbs]).then()\n      this.breadcrumbs.length = 0\n    }\n  }\n  \n  getOptions() {\n    return this.options\n  }\n  \n  \n  abstract send(data: any): void\n}\n","export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]))},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e)}),(i=n.get(\"*\"))&&i.slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.mjs.map\n","import { BaseBreadcrumbType, BaseClientType, BaseOptionsType } from '@frtjs/types'\nimport { BaseTransportDataType } from '@frtjs/types/src/transport'\nimport { SDK_NAME, SDK_VERSION, TransportCategory } from '@frtjs/comm'\n\nexport abstract class BaseTransport<C extends BaseClientType = BaseClientType> {\n  client: C\n  constructor(client: C) {\n    this.client = client\n  }\n  /**\n   * 发送数据到服务端\n   */\n  async send(category: TransportCategory, data: BaseBreadcrumbType | BaseBreadcrumbType[]): Promise<void> {\n    if(!this.client.options.dsn){\n      return\n    }\n    \n    const authInfo = await this.client.options.getAuthInfo()\n    const transformData: BaseTransportDataType = {\n      ...authInfo,\n      category,\n      sdkName: SDK_NAME,\n      sdkVersion: SDK_VERSION,\n    }\n    \n    if(Array.isArray(data)){\n      transformData.contexts = data\n    }else{\n      transformData.context = data\n    }\n    \n    return this.sendToServer(transformData)\n  }\n  \n  abstract sendToServer(data: any): void\n}\n","import { BaseTransportDataType } from '@frtjs/types'\nimport { BaseClient, BaseTransport } from '@frtjs/core'\nimport { BrowserOptionsType } from './client'\n\nexport class BrowserTransport extends BaseTransport {\n  constructor(client: BaseClient) {\n    super(client)\n  }\n  \n  sendToServer(data: BaseTransportDataType): void {\n    const send = typeof navigator.sendBeacon === 'function' ? this.sendByBeacon() : this.sendByXml()\n    \n    send(data)\n  }\n  \n  sendByXml() {\n    return (data: BaseTransportDataType) => {\n      const xhr = new (window as any).oXMLHttpRequest()\n      xhr.setRequestHeader('Content-Type', 'application/json')\n      xhr.open('POST', this.client.options.dsn!, true)\n      xhr.send(JSON.stringify(data))\n    }\n  }\n  \n  sendByBeacon() {\n    return (data: BaseTransportDataType) => {\n      const headers = {\n        type: 'application/json',\n      }\n      const status = window.navigator.sendBeacon(this.client.options.dsn!, new Blob([JSON.stringify(data)], headers))\n      if (!status) this.sendByXml().apply(this, [data])\n    }\n  }\n}\n","import { BaseClient } from '@frtjs/core'\nimport { BaseBreadcrumbType, BaseOptionsType } from '@frtjs/types'\nimport { BrowserTransport } from './transport'\n\nexport interface BrowserOptionsType extends BaseOptionsType {\n\n}\nexport class BrowserClient extends BaseClient<BrowserOptionsType> {\n  transport: BrowserTransport\n  constructor(options: BrowserOptionsType) {\n    super(options)\n    \n    this.transport = new BrowserTransport(this)\n  }\n  \n  send(data: BaseBreadcrumbType){\n    console.log(data)\n  }\n}\n","import { BaseJSErrorBreadcrumbType, BasePluginType } from '@frtjs/types'\nimport { BrowserEventTypes, getTimestampValue, isJsError, parseStackFrames, toHashCode, TransportCategory } from '@frtjs/comm'\n\nconst getTraceId = (breadcrumb: BaseJSErrorBreadcrumbType) => {\n  return toHashCode([breadcrumb.filename, breadcrumb.functionName, breadcrumb.position].join(',')).toString()\n}\nexport const jsErrorPlugin: BasePluginType = {\n  name: BrowserEventTypes.JS,\n  trace(emit) {\n    if (window) {\n      window.addEventListener('error', (e) => {\n        if(!isJsError(e)) return\n        const stacks = parseStackFrames(e.error)\n        \n        const breadcrumb: BaseJSErrorBreadcrumbType = {\n          filename: stacks[0]?.filename ?? '',\n          errorType: e.error.name,\n          position: stacks[0]?.lineno + ':' + stacks[0]?.colno,\n          stack: JSON.stringify(stacks),\n          traceId: '',\n          url: window.location.href,\n          timestamp: getTimestampValue().toString(),\n          userAgent: navigator.userAgent,\n          type: BrowserEventTypes.JS,\n          message: e.error.message,\n          functionName: stacks[0]?.functionName ?? ''\n        }\n        \n        breadcrumb.traceId = getTraceId(breadcrumb)\n        \n        emit(breadcrumb)\n      }, true)\n    }\n  },\n  transform(breadcrumb: BaseJSErrorBreadcrumbType) {\n    return {\n      ...breadcrumb\n    }\n  },\n  post(transformedData: BaseJSErrorBreadcrumbType) {\n    this.transport.send(TransportCategory.ERROR, transformedData)\n  }\n}\n","import { BaseJSErrorBreadcrumbType, BasePluginType, BaseResourceBreadcrumbType } from '@frtjs/types'\nimport { BrowserEventTypes, getTimestampValue, isResourceError, toHashCode, TransportCategory } from '@frtjs/comm'\n\nconst getTraceId = (breadcrumb: BaseResourceBreadcrumbType) => {\n  return toHashCode([breadcrumb.type, breadcrumb.filename, breadcrumb.tagName].join(',')).toString()\n}\nexport const ResErrorPlugin: BasePluginType = {\n  name: BrowserEventTypes.RESOURCE,\n  trace(emit) {\n    if (window) {\n      window.addEventListener('error', (e: Event) => {\n        if (!isResourceError(e)) return\n        const target = e.target as (HTMLLinkElement | HTMLImageElement)\n        \n        \n        const breadcrumb: BaseResourceBreadcrumbType = {\n          filename: (target as HTMLLinkElement).href || (target as HTMLImageElement).src,\n          message: '',\n          tagName: target.tagName,\n          timestamp: getTimestampValue().toString(),\n          traceId: '',\n          type: BrowserEventTypes.RESOURCE,\n          url: window.location.href,\n          userAgent: navigator.userAgent,\n          outerHTML: target.outerHTML\n        }\n        \n        breadcrumb.traceId = getTraceId(breadcrumb)\n        \n        emit(breadcrumb)\n        \n      }, true)\n    }\n  },\n  transform(breadcrumb: BaseJSErrorBreadcrumbType) {\n    return {\n      ...breadcrumb\n    }\n  },\n  post(transformedData: BaseJSErrorBreadcrumbType) {\n    this.transport.send(TransportCategory.ERROR, transformedData)\n  }\n}\n","import { BaseJSErrorBreadcrumbType, BasePluginType, BaseXhrBreadcrumbType } from '@frtjs/types'\nimport { BrowserEventTypes, getTimestampValue, toHashCode, TransportCategory } from '@frtjs/comm'\n\nconst getTraceId = (breadcrumb: BaseXhrBreadcrumbType) => {\n  return toHashCode([breadcrumb.type, breadcrumb.method, breadcrumb.xhrUrl].join(',')).toString()\n}\nexport const xhrErrorPlugin: BasePluginType = {\n  name: BrowserEventTypes.XHR,\n  trace(emit) {\n    const clientThis = this\n    if ('XMLHttpRequest' in window && typeof window.XMLHttpRequest === 'function') {\n      const oXMLHttpRequest = window.XMLHttpRequest\n      if (!(window as any).oXMLHttpRequest) {\n        // oXMLHttpRequest 为原生的 XMLHttpRequest，可以用以 SDK 进行数据上报，区分业务\n        (window as any).oXMLHttpRequest = oXMLHttpRequest\n      }\n     \n      \n      (window as any).XMLHttpRequest = function () {\n        // 覆写 window.XMLHttpRequest\n        const xhr = new oXMLHttpRequest()\n        const { open, send } = xhr\n        const breadcrumb: BaseXhrBreadcrumbType = {\n          body: '',\n          duration: '',\n          message: '',\n          method: '',\n          response: '',\n          status: '',\n          timestamp: getTimestampValue().toString(),\n          traceId: '',\n          xhrUrl: '',\n          type: BrowserEventTypes.XHR,\n          url: window.location.href,\n          userAgent: navigator.userAgent\n        }\n        \n        xhr.open = (method, url) => {\n          breadcrumb.method = method\n          breadcrumb.xhrUrl = url.toString()\n          open.call(xhr, method, url, true)\n        }\n        xhr.send = (body) => {\n          breadcrumb.body = (typeof body === 'string' ? body : JSON.stringify(body)) || ''\n          send.call(xhr, body)\n        }\n        xhr.addEventListener('loadend', () => {\n          const { status, response } = xhr\n          breadcrumb.status = status.toString()\n          breadcrumb.response = JSON.stringify(response)\n          breadcrumb.traceId = getTraceId(breadcrumb)\n          \n          if (!(status === 200)) {\n            emit(breadcrumb)\n          }else{\n            clientThis.pushBreadCrumbs(breadcrumb)\n          }\n        })\n        return xhr\n      }\n    }\n  },\n  transform(breadcrumb: BaseJSErrorBreadcrumbType) {\n    return {\n      ...breadcrumb\n    }\n  },\n  post(transformedData: BaseJSErrorBreadcrumbType) {\n    this.transport.send(TransportCategory.ERROR, transformedData)\n  }\n}\n","import { BaseJSErrorBreadcrumbType, BasePluginType, BasePromiseBreadcrumbType } from '@frtjs/types'\nimport { BrowserEventTypes, getTimestampValue, parseStackFrames, toHashCode, TransportCategory } from '@frtjs/comm'\n\nconst getTraceId = (breadcrumb: BasePromiseBreadcrumbType) => {\n  return toHashCode([breadcrumb.type, breadcrumb.message, breadcrumb.errorType].join(',')).toString()\n}\nexport const promiseErrorPlugin: BasePluginType = {\n  name: BrowserEventTypes.UNHANDLEDREJECTION,\n  trace(emit) {\n    if (window) {\n      window.addEventListener('unhandledrejection', (e) => {\n        \n        const breadcrumb: BasePromiseBreadcrumbType = {\n          errorType: e.reason.name || 'unKnown',\n          message: e.reason.message || e.reason,\n          stack: JSON.stringify(parseStackFrames(e.reason)),\n          timestamp: getTimestampValue().toString(),\n          traceId: '',\n          type: BrowserEventTypes.UNHANDLEDREJECTION,\n          url: window.location.href,\n          userAgent: navigator.userAgent\n        }\n        \n        breadcrumb.traceId = getTraceId(breadcrumb)\n        \n        emit(breadcrumb)\n      }, true)\n    }\n  },\n  transform(breadcrumb: BaseJSErrorBreadcrumbType) {\n    return {\n      ...breadcrumb\n    }\n  },\n  post(transformedData: BaseJSErrorBreadcrumbType) {\n    this.transport.send(TransportCategory.ERROR, transformedData)\n  }\n}\n","import { BrowserClient, BrowserOptionsType } from './src/client'\nimport { jsErrorPlugin, promiseErrorPlugin, ResErrorPlugin, xhrErrorPlugin } from './src/plugins'\n\nconst init = (options: BrowserOptionsType) => {\n  const browser = new BrowserClient(options)\n  \n  browser.use(jsErrorPlugin).use(ResErrorPlugin).use(xhrErrorPlugin).use(promiseErrorPlugin)\n  \n  return browser\n}\nconst frtjs = { init }\nexport default frtjs\n"],"names":["SDK_NAME","SDK_VERSION","TransportCategory","BrowserEventTypes","FULL_MATCH","parseStackLine","line","lineMatch","match","filename","functionName","lineno","parseInt","undefined","colno","parseStackFrames","error","maxDepth","stack","frames","split","slice","frame","push","isJsError","e","ErrorEvent","toHashCode","s","reduce","a","b","charCodeAt","getTimestampValue","Date","valueOf","BaseClient","constructor","options","n","this","Object","assign","maxBreadcrumbs","_subscribe","all","Map","on","t","i","get","set","off","splice","indexOf","emit","map","breadcrumbs","use","plugin","trace","call","bind","name","args","res","_a","transform","apply","_b","post","pushBreadCrumbs","data","length","transport","send","API","then","getOptions","BaseTransport","client","category","dsn","authInfo","getAuthInfo","transformData","sdkName","sdkVersion","Array","isArray","contexts","context","sendToServer","BrowserTransport","super","navigator","sendBeacon","sendByBeacon","sendByXml","xhr","window","oXMLHttpRequest","setRequestHeader","open","JSON","stringify","Blob","type","BrowserClient","console","log","jsErrorPlugin","JS","addEventListener","stacks","breadcrumb","errorType","position","_c","_d","traceId","url","location","href","timestamp","toString","userAgent","message","_f","_e","join","getTraceId","transformedData","ERROR","ResErrorPlugin","RESOURCE","isResourceError","target","src","tagName","outerHTML","xhrErrorPlugin","XHR","clientThis","XMLHttpRequest","body","duration","method","response","status","xhrUrl","promiseErrorPlugin","UNHANDLEDREJECTION","reason","init","browser"],"mappings":"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","x_google_ignoreList":[4]}